import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np


df = pd.read_csv('D:/SPPU BE Lab Practicals/ML/uber.csv')
df

df = df.drop(['Unnamed: 0', 'key', 'pickup_datetime'], axis = 1)
df.dropna(inplace=True)

sns.boxplot(df['fare_amount'])

low = df['fare_amount'].quantile(0.05)
high = df['fare_amount'].quantile(0.95)
df = df[(df['fare_amount'] > low) & (df['fare_amount'] < high)]

sns.boxplot(df['fare_amount'])

plt.boxplot(df['fare_amount'])

corr = df.corr()
sns.heatmap(corr, annot=True)


# Train Test Split
from sklearn.model_selection import train_test_split
X = df.drop(['fare_amount'], axis=1)
y = df['fare_amount']
X_train, x_test, y_train, y_test = train_test_split(X, y)




from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(x_test)




from sklearn.metrics import mean_squared_error, r2_score
RMSE = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE -> ", RMSE)
R2 = r2_score(y_test, y_pred)
print("R2 -> ", R2)



from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(X_train, y_train)
y_pred = model.predict(x_test)


from sklearn.metrics import mean_squared_error, r2_score
RMSE = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE -> ", RMSE)
R2 = r2_score(y_test, y_pred)
print("R2 -> ", R2)


1. Uber - 
This code is a data analysis and predictive modeling pipeline to predict Uber fare amounts. First, it loads and cleans the data by 
removing unnecessary columns and handling missing values. Outliers in the fare_amount column are filtered out by removing values outside
the 5th and 95th percentiles. A correlation heatmap is generated to show relationships among features.

The dataset is then split into training and testing sets, with fare_amount as the target variable. Two models are built to predict fare amounts:
linear regression and random forest regression. Both models are trained on the training data and tested on the test set. Model performance is
evaluated using Root Mean Squared Error (RMSE) and  𝑅2  score, which indicate prediction accuracy and variance explanation, respectively.
This process allows comparison of both models’ effectiveness in predicting Uber fares.
